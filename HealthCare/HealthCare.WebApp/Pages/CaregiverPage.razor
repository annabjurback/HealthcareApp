@page "/caregiverpage"
@using HealthCare.WebApp.Services
@using HealthCare.Core.Models
@inject UserDataService UserDataService
@inject IJSRuntime JSRuntime
@*@inject HealthCare.Core.Models.Booking Booking*@

@code{
    public string CaregiverId;
    private bool isFirstRender = true;
    public DateTime Date = DateTime.Now;
    public string Note = null;
    public bool Completed = false;
    public string PatientID = null;
    public bool CanBeBooked = true;
    public List<Booking> Bookings = new List<Booking>();
    public bool ShowError = false;
    public List<Booking> AllBookings = new List<Booking>();
    public List<Booking> Monday = new List<Booking>();
    public List<Booking> Tuesday = new List<Booking>();
    public List<Booking> Wednesday = new List<Booking>();
    public List<Booking> Thursday = new List<Booking>();
    public List<Booking> Friday = new List<Booking>();
    private bool hasLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        CaregiverId = await UserDataService.GetUserIdAsync();
        await getAllMeetings();
        StateHasChanged();

    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender && !hasLoaded)
    //    {
    //        StateHasChanged(); 
    //        hasLoaded = true;
    //    }
    //}


    public async Task CreateEmptyMeeting(){

        await CheckOverlapingTimeInCalender(Date);

        using var httpClient = new HttpClient(new HttpClientHandler())
            {
                BaseAddress = new Uri("https://localhost:7139/")
            };

        if (CanBeBooked)
        {
            var apiEndpoint = $"/api/booking/?start={Date}&note={Note}&completed={Completed}&patientId={PatientID}&caregiverId={CaregiverId}";
            var getBookingResponse = await httpClient.PostAsync(apiEndpoint, null);
            if (getBookingResponse.IsSuccessStatusCode)
            {
                await getAllMeetings();
                StateHasChanged();
            }
        }
    }

    public async Task getAllMeetings()
    {
        var today = DateTime.Now;

        using var httpClient = new HttpClient(new HttpClientHandler())
            {
                BaseAddress = new Uri("https://localhost:7139/")
            };

        var apiEndpoint = $"/api/booking/getAllBookingsForCaregivers?Id={CaregiverId}";
        var getBookingResponse = await httpClient.GetAsync(apiEndpoint);

        AllBookings = await getBookingResponse.Content.ReadFromJsonAsync<List<Booking>>();

        Monday = await FilterBookingsByDayOfWeekAndWeek(AllBookings, DayOfWeek.Monday, today);
        Tuesday = await FilterBookingsByDayOfWeekAndWeek(AllBookings, DayOfWeek.Tuesday, today);
        Wednesday = await FilterBookingsByDayOfWeekAndWeek(AllBookings, DayOfWeek.Wednesday, today);
        Thursday = await FilterBookingsByDayOfWeekAndWeek(AllBookings, DayOfWeek.Thursday, today);
        Friday = await FilterBookingsByDayOfWeekAndWeek(AllBookings, DayOfWeek.Friday, today);
        StateHasChanged();
    }

    public async Task<List<Booking>> FilterBookingsByDayOfWeekAndWeek(List<Booking> bookings, DayOfWeek dayOfWeek, DateTime today)
    {
        var weekStartDate = today.Date.AddDays(-(int)today.DayOfWeek); // Startdatum för veckan
        var weekEndDate = weekStartDate.AddDays(6); // Slutdatum för veckan

        var filteredBookings = bookings
            .Where(booking => booking.Start.DayOfWeek == dayOfWeek && booking.Start >= weekStartDate && booking.Start <= weekEndDate)
            .ToList();

        return filteredBookings;
    }

    public async Task<bool> CheckOverlapingTimeInCalender(DateTime Date)
    {
        using var httpClient = new HttpClient(new HttpClientHandler())
            {
                BaseAddress = new Uri("https://localhost:7139/")
            };

        var apiEndpoint = $"/api/booking/getAllBookingsForCaregivers?Id={CaregiverId}";
        var getBookingResponse = await httpClient.GetAsync(apiEndpoint);

            Bookings = await getBookingResponse.Content.ReadFromJsonAsync<List<Booking>>();

            foreach(var meting in Bookings)
            {
                if (Date >= meting.Start && Date < meting.End)
                {
                    CanBeBooked = false;
                    ShowError = true;
                break;
                }
                else
                {
                    CanBeBooked = true;
                    ShowError = false;
                }
            }
            return CanBeBooked;       
    }
}

<div class="top-banner">
    <img src="BannerCaregiver.jpg" alt="Top Banner">
</div>

<div class="navigation">
    <button class="navigation_button" id="calendarBtn">Calendar</button>
    <button class="navigation_button" id="salaryBtn">Salary</button>
    <button class="navigation_button" id="settingsBtn">Settings</button>
</div>

<div class="sub-navigation">
    <form class="booking_form" @onsubmit="CreateEmptyMeeting">
        <div>Create meeting</div>
        <input @bind="Date" type="datetime-local"/>
        <button class="navigation_button" type="submit">Submit</button>
        @if (ShowError)
        {
            <span>There is alredy a meeting at the selected time</span>
        }
        
    </form>
</div>

<div class="week-view">

    <CalenderComponent Bookings="Monday"/>
    <CalenderComponent Bookings="Tuesday" />
    <CalenderComponent Bookings="Wednesday"/>
    <CalenderComponent Bookings=" Thursday"/>
    <CalenderComponent Bookings="Friday" />

</div>
      
    
    
