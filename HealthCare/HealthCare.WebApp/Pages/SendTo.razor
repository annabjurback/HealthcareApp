@page "/sendTo"
@using HealthCare.WebApp.Services
@using HealthCare.WebApp.Services.Auth0
@using Microsoft.AspNetCore.WebUtilities
@using System.IdentityModel.Tokens.Jwt
@inject TokenService TokenService
@inject NavigationManager NavigationManager
@inject UserDataService UserDataService

@if (!string.IsNullOrEmpty(userRole) && userRole.ToLower() == "admin" && !isError)
{
    <button @onclick="@(() => RedirectUser("caregiver"))">Redirect to Caregiver Page</button>
    <button @onclick="@(() => RedirectUser("patient"))">Redirect to Patient Page</button>
}

@code {
    private string userToken;
    private string userRole;
    private string userEmail;
    private string userId;
    private bool isError = false;
    private string errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Extract the authorization code from the query string
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var code))
                {
                    userToken = await TokenService.ExchangeAuthorizationCodeForUserTokenAsync(code);

                    // Nu kan du dekodera tokenet för att få roller eller annan information
                    var handler = new JwtSecurityTokenHandler();
                    var jsonToken = handler.ReadToken(userToken) as JwtSecurityToken;
                    var rolesClaim = jsonToken?.Claims.FirstOrDefault(claim => claim.Type == "Authorizationroles")?.Value;
                    if (rolesClaim != null)
                    {
                        //TODO Spara dessa värden till i DB. 
                        userRole = rolesClaim;
                        userEmail = jsonToken?.Claims.FirstOrDefault(claim => claim.Type == "name")?.Value;
                        userId = jsonToken?.Claims.FirstOrDefault(claim => claim.Type == "sub")?.Value;
                    }
                }
                else
                {
                    isError = true;
                    errorMessage = "Authorization code not found in the URL query string.";
                }
            }
            catch (Exception ex)
            {
                isError = true;
                errorMessage = ex.Message;
            }

            if (!isError && !string.IsNullOrEmpty(userRole))
            {
                // Store user ID securely in the UserDataService
                UserDataService.SetUserId(userId);

                switch (userRole.ToLower())
                {
                    case "patient":
                        NavigationManager.NavigateTo("/patientPage");
                        break;
                    case "caregiver":
                        NavigationManager.NavigateTo("/caregiverPage");
                        break;
                    case "admin":
                        break;
                    default:
                        isError = true;
                        errorMessage = "Invalid user role.";
                        break;
                }
            }

            StateHasChanged(); // Notify the component that its state has changed. 

            //TODO Kalla på metoden på Annas Service metod. (SKICKA MED GUID)
        }
    }
    public void RedirectUser(string role)
    {
        if (role == "patient")
        {
            NavigationManager.NavigateTo("/patient");
        }
        else if (role == "caregiver")
        {
            NavigationManager.NavigateTo("/caregiver");
        }
    }
}

